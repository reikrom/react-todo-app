{"version":3,"sources":["todos.js","addForm.js","App.js","serviceWorker.js","index.js"],"names":["Todos","todos","deleteTodo","todoList","length","map","todo","className","key","id","content","onClick","AddForm","addTodo","useState","setContent","onSubmit","e","preventDefault","Math","random","type","value","onChange","target","App","setTodos","nTodos","filter","nTodo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yLA+BeA,EA7BD,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WACjBC,EAAWF,EAAMG,OACtBH,EAAMI,KAAI,SAAAC,GACT,OACC,yBACCC,UAAU,mDAGVC,IAAKF,EAAKG,IAEV,8BAAOH,EAAKI,SACZ,4BACCC,QAAS,WACRT,EAAWI,EAAKG,KAEjBF,UAAU,qBAJX,cAYH,uBAAGA,UAAU,UAAb,kCAGD,OAAO,yBAAKA,UAAU,8BAA8BJ,ICHtCS,EAvBC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACFC,mBAAS,IADP,mBACzBJ,EADyB,KAChBK,EADgB,KAahC,OACC,6BACC,0BAAMC,SARa,SAAAC,GACpBA,EAAEC,iBACFL,EAAQ,CAAEJ,GAAIU,KAAKC,SAAUV,YAC7BK,EAAW,MAMT,gDACA,2BAAOM,KAAK,OAAOC,MAAOZ,EAASa,SAdjB,SAAAN,GACpBF,EAAWE,EAAEO,OAAOF,aC8BPG,MAhCf,WAAgB,IAAD,EACaX,mBAAS,CACjC,CACEL,GAAI,EACJC,QAAS,iBAEX,CACED,GAAI,EACJC,QAAS,mBARA,mBACNT,EADM,KACCyB,EADD,KAuBb,OACE,yBAAKnB,UAAU,sBACb,wBAAIA,UAAU,oBAAd,UACA,kBAAC,EAAD,CAAON,MAAOA,EAAOC,WAdN,SAAAO,GACjB,IAAMkB,EAAS1B,EAAM2B,QAAO,SAAAtB,GAC1B,OAAOA,EAAKG,KAAOA,KAErBiB,EAASC,MAWP,kBAAC,EAAD,CAASd,QARG,SAAAP,GACd,IAAMuB,EAAK,sBAAO5B,GAAP,CAAcK,IACzBoB,EAASG,QCbOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDyHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7f35d51d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Todos = ({ todos, deleteTodo }) => {\r\n\tconst todoList = todos.length ? (\r\n\t\ttodos.map(todo => {\r\n\t\t\treturn (\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName=\"collection-item todo-item blue-grey lighten-5\r\n\r\n                \"\r\n\t\t\t\t\tkey={todo.id}\r\n\t\t\t\t>\r\n\t\t\t\t\t<span>{todo.content}</span>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tdeleteTodo(todo.id);\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tclassName=\"btn blue darken-2\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tDelete\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t})\r\n\t) : (\r\n\t\t<p className=\"center\"> You have no todo's left, yay!</p>\r\n\t);\r\n\r\n\treturn <div className=\"todos collection z-depth-1\">{todoList}</div>;\r\n};\r\n\r\nexport default Todos;\r\n","import React, { useState } from \"react\";\r\n\r\nconst AddForm = ({ addTodo }) => {\r\n\tconst [content, setContent] = useState(\"\");\r\n\r\n\tconst handleChange = e => {\r\n\t\tsetContent(e.target.value);\r\n\t};\r\n\r\n\tconst handleSubmit = e => {\r\n\t\te.preventDefault();\r\n\t\taddTodo({ id: Math.random(), content });\r\n\t\tsetContent(\"\");\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t<label>Add new todo:</label>\r\n\t\t\t\t<input type=\"text\" value={content} onChange={handleChange} />\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default AddForm;\r\n","import React, { useState } from \"react\";\nimport Todos from \"./todos\";\nimport AddForm from \"./addForm\";\n\nfunction App() {\n  const [todos, setTodos] = useState([\n    {\n      id: 1,\n      content: \"buy some milk\",\n    },\n    {\n      id: 2,\n      content: \"clean kitchen\",\n    },\n  ]);\n\n  const deleteTodo = id => {\n    const nTodos = todos.filter(todo => {\n      return todo.id !== id;\n    });\n    setTodos(nTodos);\n  };\n\n  const addTodo = todo => {\n    const nTodo = [...todos, todo];\n    setTodos(nTodo);\n  };\n  return (\n    <div className=\"todo-app container\">\n      <h1 className=\"center blue-text\">Todo's</h1>\n      <Todos todos={todos} deleteTodo={deleteTodo} />\n      <AddForm addTodo={addTodo} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}